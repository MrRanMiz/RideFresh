#include <DHT.h>          // Include Adafruit DHT library for DHT11/DHT22 sensors
#include <DHT_U.h>        // Include Adafruit Unified Sensor library (optional, provides standard sensor API)

#define DHT11Pin 2        // Define digital pin 2 as the DHT11 data pin
#define DHTType DHT11     // Define the sensor type as DHT11

// OLED Libraries
#include <Wire.h>                // Include I2C library for communication
#include <Adafruit_GFX.h>        // Include core graphics library for OLED
#include <Adafruit_SSD1306.h>    // Include SSD1306 OLED library


#include "U8glib.h"

U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_DEV_0 | U8G_I2C_OPT_NO_ACK | U8G_I2C_OPT_FAST); 

// 'oLED Menu', 128x64px
const unsigned char epd_bitmap_oLED_Menu [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0x8f, 0x20, 0x78, 0xe3, 0xc0, 0x80, 0x39, 0xe3, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0x8f, 0x20, 0x79, 0xe3, 0xc0, 0x86, 0x79, 0xe3, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x04, 0x08, 0x20, 0x41, 0x00, 0x80, 0xc6, 0x45, 0x12, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x04, 0x08, 0x20, 0x41, 0x00, 0x80, 0xee, 0x45, 0x12, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0x8e, 0x20, 0x71, 0x00, 0x80, 0xb6, 0x45, 0x13, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xc8, 0x20, 0x41, 0x00, 0x80, 0x86, 0x45, 0x12, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x48, 0x20, 0x41, 0x00, 0x80, 0x86, 0x45, 0x12, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x04, 0x48, 0x20, 0x41, 0x10, 0x80, 0x86, 0x45, 0x12, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0x8f, 0xbe, 0x7c, 0xe0, 0x80, 0x86, 0x39, 0xe3, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
	0x40, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x81, 0xc7, 0x86, 
	0x40, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x00, 0x00, 0x8b, 0xc7, 0x86, 
	0x40, 0x00, 0x04, 0x49, 0x1c, 0x38, 0xe0, 0x24, 0x70, 0xf0, 0x20, 0xe4, 0x80, 0x8a, 0x21, 0x06, 
	0x40, 0x00, 0x04, 0x4b, 0x3c, 0x79, 0xe0, 0x2c, 0xf1, 0xf0, 0x79, 0xe5, 0x80, 0x8a, 0x21, 0x06, 
	0x40, 0x00, 0x07, 0x8c, 0x22, 0x41, 0x00, 0x30, 0x89, 0x10, 0x61, 0x16, 0x00, 0xfa, 0x21, 0x06, 
	0x40, 0x3c, 0x04, 0x08, 0x3e, 0x38, 0xe0, 0x20, 0xf9, 0x10, 0x21, 0x14, 0x00, 0x9a, 0x21, 0x06, 
	0x40, 0x7c, 0x04, 0x08, 0x20, 0x0c, 0x30, 0x20, 0x81, 0x10, 0x21, 0x14, 0x00, 0x8a, 0x21, 0x06, 
	0x40, 0xfc, 0x04, 0x08, 0x22, 0x45, 0x10, 0x20, 0x89, 0x10, 0x21, 0x14, 0x00, 0x8a, 0x21, 0x06, 
	0x40, 0x78, 0x04, 0x08, 0x1c, 0x38, 0xe0, 0x20, 0x70, 0xf0, 0x20, 0xe4, 0x00, 0x89, 0xc1, 0x06, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
	0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
	0x40, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x10, 0x00, 0x01, 0x86, 0x20, 0xe6, 
	0x40, 0x00, 0x09, 0x00, 0x70, 0x00, 0x02, 0x04, 0x00, 0xe0, 0x20, 0x00, 0x02, 0x49, 0x20, 0x96, 
	0x40, 0x00, 0x09, 0x2c, 0xf3, 0xcf, 0x03, 0xc4, 0x49, 0xe0, 0x63, 0xcb, 0x02, 0x09, 0x20, 0x96, 
	0x40, 0x00, 0x09, 0x38, 0x8a, 0x49, 0x02, 0x44, 0x49, 0x10, 0x72, 0x4e, 0x02, 0x09, 0x20, 0x96, 
	0x40, 0x00, 0x0e, 0x20, 0xfb, 0x8e, 0x02, 0x44, 0x49, 0xf0, 0x22, 0x48, 0x02, 0x09, 0x20, 0x96, 
	0x40, 0x00, 0x08, 0x20, 0x81, 0xc7, 0x02, 0x44, 0x49, 0x00, 0x22, 0x48, 0x02, 0x09, 0x20, 0x96, 
	0x40, 0x00, 0x08, 0x20, 0x8a, 0x49, 0x02, 0x44, 0x49, 0x10, 0x22, 0x48, 0x02, 0x49, 0x20, 0x96, 
	0x40, 0x00, 0x08, 0x20, 0x73, 0xcf, 0x03, 0xc6, 0x78, 0xe0, 0x23, 0xc8, 0x03, 0xcf, 0x3c, 0xf6, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
	0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc
};


DHT HT(DHT11Pin, DHTType);       // Create DHT object
float humi;                       // Variable to store humidity
float tempC;                       // Variable to store temperature in Celsius
float tempF;                       // Variable to store temperature in Fahrenheit
int currentscene= 0; //*************************
// OLED definitions 
#define SCREEN_WIDTH 128           // OLED display width in pixels
#define SCREEN_HEIGHT 64           // OLED display height in pixels
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);  // Initialize OLED with I2C, no reset pin

void setup() {
  pinMode(4,INPUT_PULLUP);
  pinMode(7,INPUT_PULLUP);

  Serial.begin(9600);             // Start serial communication at 9600 baud

  // Initialize DHT11 sensor
  HT.begin();

  // Initialize OLED display
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // 0x3C is OLED I2C address
    Serial.println(F("SSD1306 allocation failed"));  // Error message if OLED init fails
    for (;;);                                       // Stop program if OLED not found
  }

  display.display();                // Show default display (like splash screen)
  delay(1000);                      // Wait 1 second
  display.clearDisplay();           // Clear OLED buffer

  u8g.setFont(u8g_font_tpssb);
  u8g.setColorIndex(1);
}


void loop() {
  if (digitalRead(4)==0 && currentscene==0){
    currentscene=1; //HOT MODE
  }
    else if (digitalRead(7)==0 && currentscene==0){
    currentscene=2; //COLD MODE
  }
  delay(1000);                       // Wait 1 second between readings

  // Read DHT11 sensor
  humi = HT.readHumidity();          // Read humidity
  tempC = HT.readTemperature();      // Read temperature in Celsius
  tempF = HT.readTemperature(true);  // Read temperature in Fahrenheit

  // Print values to Serial Monitor
  Serial.print("%");
  Serial.print(" Temperature:");
  Serial.print(tempC, 1);            // Print Celsius temperature with 1 decimal
  Serial.print("C   ~ ");
  Serial.print(tempF, 1);            // Print Fahrenheit temperature with 1 decimal
  Serial.println("F");


  if (currentscene==1 || 2){
    // Clear OLED buffer before drawing new data
    display.clearDisplay();
    // Draw header on OLED
    oledDisplayHeader();
    // Draw humidity and temperatures on OLED
    //oledDisplay(3, 5, 28, humi, "%");     // Display humidity
    oledDisplay(2, 70, 16, tempC, "C");   // Display temperature in Celsius
    oledDisplay(2, 70, 44, tempF, "F");   // Display temperature in Fahrenheit
    display.display();                     // Update OLED with drawn content
  }else if (currentscene==0){
    u8g.firstPage();
  do {
    u8g.drawBitmapP( 0, 0, 128/8, 64, epd_bitmap_oLED_Menu);
  } while ( u8g.nextPage() );
  }
}

// Function to display header on OLED
void oledDisplayHeader() {
  display.setTextSize(1);         // Set text size
  display.setTextColor(WHITE);    // Set text color
  display.setCursor(20, 12);        // Set cursor to top-left
  display.print("Mode:");           // Print "Mode" label
  display.setCursor(60, 0);       // Move cursor to the right
  display.print("Temperature");    // Print "Temperature" label
  display.setCursor(0,25);
  display.setTextSize(3);
  display.print("COLD");

}

// Function to display a value with unit on OLED
void oledDisplay(int size, int x, int y, float value, String unit) {
  int charLen = 12;               // Approximate width of a character
  int xo = x + charLen * 3.2;     // X coordinate for degree symbol
  int xunit = x + charLen * 3.6;  // X coordinate for unit text
  int xval = x;                    // Starting x coordinate for value

  display.setTextSize(size);       // Set text size
  display.setTextColor(WHITE);     // Set text color

  if (unit == "%") {               // Special formatting for humidity
    display.setCursor(x, y);
    display.print(value, 0);       // Print integer value
    display.print(unit);           // Print unit "%"
  } else {                         // Formatting for temperature
    if (value > 99) {              // Adjust x position if temperature > 99
      xval = x;
    } else {
      xval = x + charLen;          // Slight shift for smaller numbers
    }
    display.setCursor(xval, y);    // Set cursor for temperature value
    display.print(value, 0);       // Print integer temperature
    display.drawCircle(xo, y + 2, 2, WHITE); // Draw small circle for degree symbol
    display.setCursor(xunit, y);   // Set cursor for unit
    display.print(unit);           // Print "C" or "F"
  }
}

